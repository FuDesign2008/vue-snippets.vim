
extends typescript

snippet vuexMod "define vuex dynamic @Module"
/**
 *
 * @author fuyg
 * @date  `date +%Y-%m-%d`
 */
import { getName } from '@/common/http/apis/name'
import { Action, Module, Mutation, VuexModule, getModule } from 'vuex-module-decorators'
import store from 'path/to/store'

/* eslint-disable @typescript-eslint/member-ordering */

@Module({
  namespaced: true,
  stateFactory: true,
  dynamic: true,
  store,
  name: '`!v substitute(expand('%:t:r'), '^\([a-z]\)', '\l\1', '')`'
})
class `!v substitute(expand('%:t:r'), '^\([a-z]\)', '\u\1', '')` extends VuexModule {
  /**************************************************************************
   * state
   **************************************************************************/

  name: string = ''
  ${VISUAL}$0

  /**************************************************************************
   * getters
   **************************************************************************/

  get theName(): string {
    return this.name
  }

  /**************************************************************************
   * mutations
   **************************************************************************/

  @Mutation
  setName(name: string): void {
    this.name = name
  }

  /**************************************************************************
   * actions
   **************************************************************************/

  @Action({
    rawError: true,
    commit: 'setName'
  })
  async fetchName(params: string): Promise<string> {
    const data = getName(params)
    return data
  }
}

const `!v substitute(expand('%:t:r'), '^\([a-z]\)', '\l\1', '')`Store = getModule(`!v substitute(expand('%:t:r'), '^\([a-z]\)', '\u\1', '')`)

export default  `!v substitute(expand('%:t:r'), '^\([a-z]\)', '\l\1', '')`Store
endsnippet

snippet vuexModule "define vuex @Module"
/**
 *
 * @author fuyg
 * @date  `date +%Y-%m-%d`
 */
import { getName } from '@/common/http/apis/name'
import { Action, Module, Mutation, VuexModule } from 'vuex-module-decorators'

/* eslint-disable @typescript-eslint/member-ordering */

@Module({
  namespaced: true,
  stateFactory: true,
})
class `!v substitute(expand('%:t:r'), '^\([a-z]\)', '\u\1', '')` extends VuexModule {
  /**************************************************************************
   * state
   **************************************************************************/

  name: string = ''
  ${VISUAL}$0

  /**************************************************************************
   * getters
   **************************************************************************/

  get theName(): string {
    return this.name
  }

  /**************************************************************************
   * mutations
   **************************************************************************/

  @Mutation
  setName(name: string): void {
    this.name = name
  }

  /**************************************************************************
   * actions
   **************************************************************************/

  @Action({
    rawError: true,
    commit: 'setName'
  })
  async fetchName(params: string): Promise<string> {
    const data = getName(params)
    return data
  }
}

export default  `!v substitute(expand('%:t:r'), '^\([a-z]\)', '\u\1', '')`
endsnippet


snippet vuexMutation "define vuex @Mutation"
  @Mutation
  setName(name: string): void {
    this.name = name
  }
endsnippet


snippet vuexAction "define vuex @Action with http module"
  @Action({
    rawError: true,
    commit: 'setName'
  })
  async fetchName(params: string): Promise<string> {
    const data = getName(params)
    return data
  }
endsnippet

snippet vuexActionAxios "define vuex @Action with axios"
  @Action({
    rawError: true,
    commit: 'setName'
  })
  async fetchName(params: string): Promise<string> {
    const url = 'TODO'
    const response: AxiosResponse = await axios.get(url)
    return response.data
  }
endsnippet


