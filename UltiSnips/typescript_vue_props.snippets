extends typescript

snippet Propbool "vue @Prop: required Boolean " b
  @Prop({
    type: Boolean,
    required: true
  })
  private readonly ${0:propName}!: boolean

endsnippet

snippet Propbooldef "vue @Prop: Boolean with default" b
  @Prop({
    type: Boolean,
    default: false
  })
  private readonly ${0:propName}!:boolean

endsnippet

snippet Propnum "vue @Prop: required Number " b
  @Prop({
    type: Number,
    required: true
  })
  private readonly ${0:propName}!: number

endsnippet

snippet Propnumdef "vue @Prop: Number with default" b
  @Prop({
    type: Number,
    default: 0
  })
  private readonly ${0:propName}!: number

endsnippet

snippet Propnumval "vue @Prop: Number with default and validator" b
  @Prop({
    type: Number,
    required: false,
    default: 0,
    validator(value): boolean {
      const validValues = [
        // TODO
      ]
      return validValues.include(value)
    },
  })
  private readonly ${0:propName}!: number

endsnippet


snippet Propstr "vue @Prop: required String " b
  @Prop({
    type: String,
    required: true
  })
  private readonly ${0:propName}!: string

endsnippet

snippet Propstrdef "vue @Prop: String with default" b
  @Prop({
    type: String,
    default: 'default'
  })
  private readonly ${0:propName}!:string

endsnippet

snippet Propstrval "vue @Prop: String with default and validator" b
  @Prop({
    type: String,
    required: false,
    default: 'default',
    validator(value): boolean {
      const validValues = [
        // TODO
      ]
      return validValues.include(value)
    },
  })
  private readonly ${0:propName}!:string

endsnippet

snippet Proparr "vue @Prop: required Array" b
  @Prop({
    type: Array,
    required: true,
  })
  private readonly ${1:propName}!: ${0:AsType[]}

endsnippet

snippet Proparrdef "vue @Prop: Array with default" b
  @Prop({
    type: Array,
    default():$0 {
      const arr = [
        // TODO
      ]
      return arr
    }
  })
  private readonly ${1:propName}!: ${0:AsType[]}

endsnippet

snippet Proparrval "vue @Prop: Array with default and validator" b
  @Prop({
    type: Array,
    required: false,
    default(): $0 {
      const arr = [
        // TODO
      ]
      return arr
    },
    validator(arr:$0): boolean {
      return arr.every((item) => {
        // TODO
      })
    },
  })
  private readonly ${1:propName}!: ${0:AsType[]}

endsnippet

snippet Propobj "vue @Prop: required Object" b
  @Prop({
    type: Object,
    required: true,
  })
  private readonly ${1:propName}!: ${0:AsType}

endsnippet

snippet Propobjdef "vue @Prop: Object with default" b
  @Prop({
    type: Object,
    default: (): $0 => {
      return {
        // TODO
      }
    }
  })
  private readonly ${1:propName}!: ${0:AsType}

endsnippet

snippet Propobjval "vue @Prop: Object with default and validator" b
  @Prop({
    type: Object,
    default: (): $0 => {
      return {
        // TODO
      }
    },
    validator(obj: $0): boolean {
      // TODO
    },
  })
  private readonly ${1:propName}!: ${0:AsType}

endsnippet




