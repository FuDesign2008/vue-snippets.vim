extends typescript

#
# axios
#

snippet axiosts "async get data with axios in ts" b
  @Action({commit: 'setData'})
  async fetchData(params: Record<string, any>) {
    const url = 'TODO'

    const response:AxiosResponse = await axios.get(url, {
      params,
    })
    const { data } = response
    return data
  }
endsnippet

snippet axiospostts "async post data with axios in ts" b
  @Action({commit: 'setData'})
  async postData( params: Record<string, any>) {
    const url = 'TODO'

    const response:AxiosResponse = await axios.post(url, {
      ...params,
    })
    const { data } = response
    return data
  }
endsnippet

snippet axiosputts "async put data with axios in ts" b
  @Action({commit: 'setData'})
  async putData(params: Record<string, any>) {
    const url = 'TODO'

    const response:AxiosResponse = await axios.put(url, {
      ...params,
    })
    const { data } = response
    return data
  }
endsnippet

snippet axiosformts "async post form data  with axios in ts" b
  @Action({commit: 'setUploadedData'})
  async uploadFormData( uploadData: Record<string, any>) {
    const url = 'TODO'

    const formData = new FormData()
    const keys = Object.keys(uploadData)
    keys.forEach((name) => {
      const value = uploadData[name]
      formData.append(name, value)
    })

    const response:AxiosResponse = await axios.post(url, formData)
    const { data } = response
    return data
  }
endsnippet


snippet axiosfilets "async upload file with axios in ts" b
  @Action({commit: 'setUploadedFile'})
  async uploadFile({ name, file }: {
    name: string,
    file: string,
  }) {
    const url = 'TODO'

    const formData = new FormData()
    formData.append(name, file)

    const response:AxiosResponse = await axios.post(url, formData)
    const { data } = response
    return data
  }
endsnippet


snippet axiossearchts "async post URLSearchParams data with axios in ts" b
  @Action({commit: 'setUploadedData'})
  async uploadData( uploadData: Record<string, any>) {
    const url = 'TODO'
    const params = new URLSearchParams(uploadData)

    const response:AxiosResponse = await axios.post(url, params)
    const { data } = response
    return data
  }
endsnippet


snippet axiosdelts "async delete data with axios in ts" b
  @Action({commit: 'removeData'})
  async removeData({ value }: {
    value: string
  }) {
    const url = 'TODO'
    const params = {
      data: {
        value,
      },
    }

    const response:AxiosResponse = await axios.delete(url, params)
    const { data } = response
    return data
  }
endsnippet


